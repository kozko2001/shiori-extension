{"version":3,"file":"popup.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/popup.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/popup.js\");\n","'use strict';\n\n// Copyright (c) 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * Get the current URL.\n *\n * @param {function(string)} callback - called when the URL of the current tab\n *   is found.\n */\nfunction getCurrentTabUrl(callback) {\n  // Query filter to be passed to chrome.tabs.query - see\n  // https://developer.chrome.com/extensions/tabs#method-query\n  var queryInfo = {\n    active: true,\n    currentWindow: true\n  };\n\n  chrome.tabs.query(queryInfo, function (tabs) {\n    // chrome.tabs.query invokes the callback with a list of tabs that match the\n    // query. When the popup is opened, there is certainly a window and at least\n    // one tab, so we can safely assume that |tabs| is a non-empty array.\n    // A window can only have one active tab at a time, so the array consists of\n    // exactly one tab.\n    var tab = tabs[0];\n\n    // A tab is a plain object that provides information about the tab.\n    // See https://developer.chrome.com/extensions/tabs#type-Tab\n    var url = tab.url;\n\n    // tab.url is only available if the \"activeTab\" permission is declared.\n    // If you want to see the URL of other tabs (e.g. after removing active:true\n    // from |queryInfo|), then the \"tabs\" permission is required to see their\n    // \"url\" properties.\n    console.assert(typeof url === 'string', 'tab.url should be a string');\n\n    callback(url);\n  });\n\n  // Most methods of the Chrome extension APIs are asynchronous. This means that\n  // you CANNOT do something like this:\n  //\n  // var url;\n  // chrome.tabs.query(queryInfo, function(tabs) {\n  //   url = tabs[0].url;\n  // });\n  // alert(url); // Shows \"undefined\", because chrome.tabs.query is async.\n}\n\n/**\n * @param {string} searchTerm - Search term for Google Image search.\n * @param {function(string,number,number)} callback - Called when an image has\n *   been found. The callback gets the URL, width and height of the image.\n * @param {function(string)} errorCallback - Called when the image is not found.\n *   The callback gets a string that describes the failure reason.\n */\nfunction getImageUrl(searchTerm, callback, errorCallback) {\n  // Google image search - 100 searches per day.\n  // https://developers.google.com/image-search/\n  var searchUrl = '' + ('https://ajax.googleapis.com/ajax/services/search/images' + '?v=1.0&q=') + encodeURIComponent(searchTerm);\n  var x = new XMLHttpRequest();\n  x.open('GET', searchUrl);\n  // The Google image search API responds with JSON, so let Chrome parse it.\n  x.responseType = 'json';\n  x.onload = function () {\n    // Parse and process the response from Google Image Search.\n    var response = x.response;\n    if (!response || !response.responseData || !response.responseData.results || response.responseData.results.length === 0) {\n      errorCallback('No response from Google Image search!');\n      return;\n    }\n    var firstResult = response.responseData.results[0];\n    // Take the thumbnail instead of the full image to get an approximately\n    // consistent image size.\n    var imageUrl = firstResult.tbUrl;\n    var width = parseInt(firstResult.tbWidth);\n    var height = parseInt(firstResult.tbHeight);\n    console.assert(typeof imageUrl === 'string' && !isNaN(width) && !isNaN(height), 'Unexpected respose from the Google Image Search API!');\n    callback(imageUrl, width, height);\n  };\n  x.onerror = function () {\n    errorCallback('Network error.');\n  };\n  x.send();\n}\n\nfunction renderStatus(statusText) {\n  document.getElementById('status').textContent = statusText;\n}\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  getCurrentTabUrl(function (url) {\n    // Put the image URL in Google search.\n    renderStatus('Performing Google Image search for ' + url);\n\n    getImageUrl(url, function (imageUrl, width, height) {\n      renderStatus('Search term: ' + url + '\\n' + ('Google image search result: ' + imageUrl));\n      var imageResult = document.getElementById('image-result');\n      // Explicitly set the width/height to minimize the number of reflows. For\n      // a single image, this does not matter, but if you're going to embed\n      // multiple external images in your page, then the absence of width/height\n      // attributes causes the popup to resize multiple times.\n      imageResult.width = width;\n      imageResult.height = height;\n      imageResult.src = imageUrl;\n      imageResult.hidden = false;\n    }, function (errorMessage) {\n      renderStatus('Cannot display image. ' + errorMessage);\n    });\n  });\n});"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnsourceRoot":""}